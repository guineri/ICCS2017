#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>
#include <mpi.h>
#include <unistd.h>
//#include <fstream>
//#include <string>

//using namespace std;

 
 
typedef void (*libFunc)();
 
int main(int argc, char **argv){


	MPI_Init (&argc, &argv);


	int rank, size;

	// Get MPI rank and size
	MPI_Comm_rank (MPI_COMM_WORLD, &rank);
	MPI_Comm_size (MPI_COMM_WORLD, &size);


	char hostname[1024];
        gethostname(hostname, 1024);

	

	void *ptrLib;
	ptrLib = dlopen("/home/labpi/Dropbox/POC1_2016/POC2/Framework_02/libfw.so",RTLD_LAZY);
	FILE *functions_names_file;

	functions_names_file = fopen("/home/labpi/Dropbox/POC1_2016/POC2/Framework_02/functions_names","r");
	
	if (functions_names_file == NULL) {
       		perror("Error");
    	}

	int i,N;
	char *function_name;
	//char **matrix;

	fscanf(functions_names_file,"%d",&N);
	//matrix = (char**) malloc(sizeof(char*)*N);
	char *matrix[N];
	fscanf(functions_names_file,"%s",function_name);
	for (i=0;i<N;i++){
		fscanf(functions_names_file,"%s",matrix[i]);
		printf("Valor matrix[%d]: %s \n",i,matrix[i]);
		//MPI_Finalize();
		//return 0;
	}
	for (i=0;i<N;i++){
		if(rank == i){
		
		
			printf("Hostname: %s Rank: %d Function : %s\n",hostname,rank,matrix[i]);
			libFunc function = (libFunc) dlsym(ptrLib, matrix[i]);
			if (function == NULL) { 
				fprintf(stderr, "Couldn't find function: %s Hostname: %s Rank: %d \n",matrix[i],hostname,rank); 
				return 1;
			}
			else{
				function();
			}
		}
	}
		
	

 	fclose(functions_names_file);
	MPI_Finalize();
	


	return 0;
 
}
